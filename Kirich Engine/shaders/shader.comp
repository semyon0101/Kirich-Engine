#version 450

struct Particle {
	vec3 position;
	vec3 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in; 

void main() 
{
	uint index = gl_GlobalInvocationID.x;  
	particlesOut[index].position = particlesIn[index].position + particlesIn[index].velocity * ubo.deltaTime;
	particlesOut[index].velocity = particlesIn[index].velocity;

	if ((particlesOut[index].position.x <= -1.0) || (particlesOut[index].position.x >= 1.0)) {
	    particlesOut[index].velocity.x = -particlesOut[index].velocity.x;
	}
	if ((particlesOut[index].position.y <= -1.0) || (particlesOut[index].position.y >= 1.0)) {
	    particlesOut[index].velocity.y = -particlesOut[index].velocity.y;
	}
	if ((particlesOut[index].position.z <= -1.0) || (particlesOut[index].position.z >= 1.0)) {
	    particlesOut[index].velocity.z = -particlesOut[index].velocity.z;
	}
}