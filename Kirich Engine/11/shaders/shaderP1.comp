#version 450
#define PARTICLE_PARAMETR_COUNT 2
#define CHECK 0

struct ParticleType{
    float rmin;
    float e;
    float m;
};

layout (set = 0, binding = 0) uniform ParameterUBO {
    ParticleType particleTypes[PARTICLE_PARAMETR_COUNT];
    mat4 model;
    mat4 view;
    mat4 proj;
    int width;
    int height;
    int particleCount;
    int particleDivision;
} ubo;

struct Particle {
    vec3 position;
    vec3 lposition;
    int type;
};

layout(std430, set = 1, binding = 0) readonly buffer ParticleSSBOIn {
    Particle particlesIn[ ];
};

layout(std430, set = 1, binding = 1) buffer ParticleSSBOOut {
    Particle particlesOut[ ];
};

layout(std430, set = 1, binding = 2) readonly buffer ParticleData {
    int data[ ];
};

int compar(int _x1, int _y1, int _z1, int _x2, int _y2, int _z2){

    if (_z1 > _z2) 
    	return 1;
    if (_z1 < _z2)
    	return -1;
    if (_y1 > _y2) 
    	return 1;
    if (_y1 < _y2)
    	return -1;
    if (_x1 > _x2)
    	return 1;
    if (_x1 < _x2)
    	return -1;
    
    return 0;

}

int find(int _x, int _y, int _z){
    int minIndex = 0;
    int maxIndex = ubo.particleCount-1;
    while((maxIndex - minIndex)>1){
        int index = int((minIndex + maxIndex) / 2.0);

        if (compar(_x, _y, _z, data[index * 4], data[index * 4 + 1], data[index * 4 + 2]) > 0) minIndex = index;
        else maxIndex = index;
    }
    return minIndex;  
}

vec3 calculate(Particle p1, ParticleType pt1, Particle p2, ParticleType pt2){
    vec3 f=vec3(0);
    float r = length(p1.position - p2.position);
    if(r < ubo.particleDivision){
        float rmin = pt1.rmin + pt2.rmin;
        float e = pt1.e * pt2.e;
        f = (12 * e / r * (pow(rmin / r, 12) - pow(rmin / r, 6))) * normalize(p1.position - p2.position);
//        if(p2.type==2){
//            f-=(p1.position - p1.lposition)*rmin/r*pt1.m/10000;
//        }
                
    }
    return f;
}



layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main() 
{
    uint id = gl_GlobalInvocationID.x;
    Particle currentParticle = particlesIn[id];
    ParticleType currentParticleType = ubo.particleTypes[currentParticle.type];

    if (currentParticleType.m==0){
        particlesOut[id].lposition = currentParticle.lposition;
        particlesOut[id].position = currentParticle.position;
        particlesOut[id].type = currentParticle.type;
        return;
    }

    vec3 F = vec3(0);
    vec3 a = vec3(0);

#if (CHECK == 1)
    int id1=-1;
    while (++id1<ubo.particleCount){
        if (id1==id)continue;

        Particle secondParticle = particlesIn[id1];
        ParticleType secondParticleType = ubo.particleTypes[secondParticle.type];
        F += calculate(currentParticle, currentParticleType, secondParticle, secondParticleType);
            
    }

#else
    for(int z=-1; z<=1; z++){
        for(int y=-1; y<=1; y++){
            int _x = int(ceil(currentParticle.position.x / ubo.particleDivision));
            int _y = int(ceil(currentParticle.position.y / ubo.particleDivision)) + y;
            int _z = int(ceil(currentParticle.position.z / ubo.particleDivision)) + z;
            int index = find(_x - 1, _y, _z);
            while (index<ubo.particleCount){
                int _x1 = data[index * 4];
                int _y1 = data[index * 4 + 1];
                int _z1 = data[index * 4 + 2];

                if ((_z < _z1)|| ((_y < _y1) && (_z ==_z1)) || ((_x + 1 < _x1) && (_y == _y1) && (_z == _z1))) break;
                if((_z==_z1) && (_y==_y1) && (_x + 1 >= _x1) && (_x - 1 <= _x1)){
                    uint id1 = data[index * 4 + 3];
                    index+=1;

                    if (id1==id)continue;

                    Particle secondParticle = particlesIn[id1];
                    ParticleType secondParticleType = ubo.particleTypes[secondParticle.type];

                    F += calculate(currentParticle, currentParticleType, secondParticle, secondParticleType);
                }else{
                    index+=1;
                    continue;
                }

            }
        }
    }
#endif

    F += vec3(0,0,-0.02);
    //F -= (currentParticle.position - currentParticle.lposition)*currentParticleType.m/10000;
    

    a = F / currentParticleType.m;
    


    //a-=(currentParticle.position - currentParticle.lposition)/4000;
//    if (length(a)>0.1){
//        a = normalize(a) * 0.1;
//    }

    particlesOut[id].lposition = currentParticle.position;
    particlesOut[id].position = 2*currentParticle.position - currentParticle.lposition + a;
    particlesOut[id].type = currentParticle.type;
    
}
