#version 450

struct Particle {
	vec2 position;
    vec2 lposition;
    int type;
};

layout (set = 0, binding = 0) uniform ParameterUBO {
    int width;
    int height;
} ubo;

layout(set = 1, binding = 0) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(set = 1, binding = 1) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout( set = 1, binding = 2) readonly buffer ParticleData {
    uint data[ ];
};

vec2 repeat(vec2 a){
    a.x = mod(a.x, ubo.width);
    a.y = mod(a.y, ubo.height);
//    a.x = max(min(a.x,ubo.width),0);
//    a.y = max(min(a.y,ubo.height),0);


    return a;

}


layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
void main() 
{
    uint id = gl_GlobalInvocationID.x;  
    
    if(particlesIn[id].type!=0){
        float e = 1;
        float m = 10000;

    //    if (data[location.x * ubo.height + location.y] != id + 1){
    //        particlesOut[id].position = vec2(0,0);
    //    }

        vec2 F = vec2(0, 0);
        vec2 a = vec2(0, 0);
        ivec2 location =  ivec2(particlesIn[id].position);
        for(int x=-9; x<=9; ++x){
            for(int y=-9; y<=9; ++y){
                if(x==0 && y==0) continue;
                ivec2 pos = location + ivec2(x, y);
                uint index = data[pos.x * ubo.height + pos.y];
                if(index != 0){
                    float r = length(particlesIn[id].position - particlesIn[index - 1].position);
                    if(r < 10){
                        float s=0;
                        if(particlesIn[index - 1].type==1)s=3.6;
                        else if(particlesIn[index - 1].type==0)s=8;
                        float f = 24 * e /r * (2 * pow(s/r, 12) - pow(s/r, 6));
                        F+= f * normalize(particlesIn[id].position - particlesIn[index - 1].position);
                
                    }
                
                
                
                }
            }
        }
        F+=vec2(0,0.1);
//        if (length(F)!=0){
//            F = normalize(F) * min(length(F), m/10);
//        }
    
        a = F / m;
        particlesOut[id].lposition = repeat(particlesIn[id].position);
        particlesOut[id].position =  repeat(2 * particlesIn[id].position - particlesIn[id].lposition + a);
        particlesOut[id].type = particlesIn[id].type;
    }else{
        particlesOut[id].lposition = particlesIn[id].lposition;
        particlesOut[id].position =  particlesIn[id].position;
        particlesOut[id].type = particlesIn[id].type;
    }


}
